//
// Created by Zero on 9/27/2022.
//

#ifndef TOKEN_H
#define TOKEN_H
#define MAX_TOKENS 84

#define MAX_RWORDS 17
#define MAX_TOKEN_SIZE 8
#define COMMENT_TOKEN "#"
#define  MAX_TOKEN_TYPES 32
#include <string>

using std::string;


const string TOKENS[6][84] = {
        {"a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r",
         "s", "t", "u", "v", "w", "x", "y", "z", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J",
         "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "0", "1",
         "2", "3", "4", "5", "6", "7", "8", "9", "<", ">", "=", "!", ":", "*", "/", "^", "(", ")",
         "{", "}", "[", "]", "_", "&", "|", ".", "+","-", ",", ";"},//existing tokens
        {"2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2",
         "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2",
         "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "3", "3",
         "3", "3", "3", "3", "3", "3", "3", "3", "4", "4", "4", "4", "5", "4", "4", "4", "5", "5",
         "5", "5", "5", "5", "2", "4", "4", "5", "4", "4", "5", "5"},//Start State
        {"2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2",
         "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2",
         "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2",
         "2", "2", "2", "2", "2", "2", "2", "2", "4", "4", "4", "4", "5", "4", "4", "4", "5", "5",
         "5", "5", "5", "5", "-999", "4", "4", "5", "4", "4", "5", "5"},//IDTokens
        {"-999", "-999", "-999", "-999", "-999", "-999", "-999", "-999", "-999", "-999", "-999", "-999", "-999", "-999", "-999", "-999", "-999", "-999",
         "-999", "-999", "-999", "-999", "-999", "-999", "-999", "-999", "-999", "-999", "-999", "-999", "-999", "-999", "-999", "-999", "-999", "-999",
         "-999", "-999", "-999", "-999", "-999", "-999", "-999", "-999", "-999", "-999", "-999", "-999", "-999", "-999", "-999", "-999", "3", "3",
         "3", "3", "3", "3", "3", "3", "3", "3", "4", "4", "4", "4", "4", "4", "4", "4", "5", "5",
         "5", "5", "5", "5", "-999", "4", "4", "5","4","4","5", "5"},//Number Tokens
        {"2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2",
                "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2",
                "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "3", "3",
                "3", "3", "3", "3", "3", "3", "3", "3", "-999", "-999", "4", "-999", "-999", "-999", "-999", "-999", "5", "5",
         "5", "5", "5", "5", "-999", "4", "4", "5", "-999", "-999","5", "5"},//Operation tokens
        {"2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2",
                "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2",
                "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "3", "3",
                "3", "3", "3", "3", "3", "3", "3", "3", "4", "4", "4", "4", "-999", "4", "4", "4", "-999", "-999",
                "-999", "-999", "-999", "-999", "2", "4", "4", "-999", "4", "4", "5", "-999"}//Delimiter token
};

const string TOKEN_NAME[32][2]  = {
        {"1","START"},{"2","IDTOKEN"},{"3","NUMTOKEN"},{"4","OPTOKEN"},{"5","DELIMTOKEN"}, {"6","RESERVED"},{"7""FINAL"}, {"8","EOF"},
        {"-999", "ERROR"}, {"70", "LPAREN" }, {"71", "RPAREN" }, {"72", "LBRACE" }, {"73", "RBRACE" }, {"74", "LBRACKET" }, {"75", "RBRACKET" },
        {"66", "COLON" }, {"79", "DOT" }, {"83", "SEMICOLON" }, {"82", "COMMA" }, {"64", "ASSIGN" }, {"62", "LT" }, {"63", "GT" },
        {"128", "EQ" }, {"129", "NEQ" }, {"130", "COMP" }, {"80", "ADD" }, {"81", "SUB" }, {"67", "MUL" }, {"68", "DIV" },
        {"69", "EXP" }, {"156", "OR" }, {"154", "AND" }
};


const string RESERVED_WORDS[17] = {"begin", "end", "do", "while", "whole", "label", "return", "input", "output", "program", "warp", "if", "then", "pick", "declare", "assign", "func"};

//The type of tokens available
enum TokenState {
    START = 1,
    IDTOKEN = 2,
    NUMTOKEN = 3,
    OPTOKEN = 4,
    DELIMTOKEN = 5,
    RWORD = 6,
    FINAL = 7,
    EOFTOKEN = 8,
    LPAREN = 70,
    RPAREN = 71,
    LBRACE = 72,
    RBRACE = 73,
    LBRACKET = 74,
    RBRACKET = 75,
    COLON = 66,
    DOT = 79,
    SEMICOLON = 83,
    COMMA = 82,
    ASSIGN = 64,
    LT = 62,
    GT = 63,
    EQ = 128,
    NEQ = 129,
    COMP = 130,
    ADD = 80,
    SUB = 79,
    MUL = 67,
    DIV = 68,
    EXP = 69,
    OR = 156,
    AND = 154,
    ERROR = -999

};

//Token properties
struct Token{
    TokenState ID;
    string name;
    string value;
    int line;
    int col;
};

#endif //TOKEN_H